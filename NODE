// npm 
// npm install uuid

//yarn
//yarn add uuid 


/*
UUID 생성 방법

1. V1 - 타임 스탬프 (시간) 기준으로 생성한다.
2. V3 - MD5 해시 기준으로 생성한다.  
* MD5 - MD5는 128비트 암호화 해시 함수이다. RFC 1321로 지정되어 있으며, 주로 프로그램이나 파일이 원본 그대로인지를 확인하는 무결성 검사 등에 사용된다. 
3. V4 - 랜덤값을 기반으로 생성
4. V5 - SHA-1 해시 기준으로 생성 

*/

// V1 (Based on timesteamp) UUID 생성
import { v1 } from 'uuid';

//기본 설정으로 생성
console.log(v1());

//설정을 붙여서 생성
let options = {
    node: // 바이트값 6개
    clockseq: // 클럭 시퀀스 (0 - 0x3fff 사이 값)
    msecs: // 밀리초
    nsecs: // 나노초
    random: // 16개의 랜덤 바이트값
    rng: // random 변수를 대체할 16개의 랜덤 바이트값을 반환하는 함수
}

console.log(v1(options));




// V3 (Based on MD5) UUID 생성
import { v3 } from 'uuid';

//v5는 네임스페이스라는 값과 해싱할 값으로 UUID를 만든다.
//그래서 네임스페이스로 사용할 UUID 값이 필요하다.
console.log(v3('해싱할 값', '1a30bae5-e589-47b1-9e77-a7da2cdbc2b8'));

//해싱할 값이 URL이나 도메인인 경우 미리 만들어진 네임스페이스를 활용하면 된다.
//해싱할 값이 도메인인 경우
console.log(v3('www.google.com'), v3.DNS);

//해싱할 값이 URL인 경우
console.log(v3('https://www.google.com'), v3.URL);





// V4 (Based on Random) UUID 생성
import { v4 } from 'uuid';

//기본 설정으로 생성
console.log(v4());

//설정을 붙여서 생성
let options = {
    random: // 16개의 랜덤 바이트값
    rng: // random 변수를 대체할 16개의 랜덤 바이트값을 반환하는 함수
}
console.log(v4(options));




// V5 (Based on SHA-1) UUID 생성
import { v5 } from 'uuid';

//v5는 네임스페이스라는 값과 해싱할 값으로 UUID를 만든다.
//그래서 네임스페이스로 사용할 UUID 값이 필요하다.
console.log(v5('해싱할 값', '1a30bae5-e589-47b1-9e77-a7da2cdbc2b8'));

//해싱할 값이 URL이나 도메인인 경우 미리 만들어진 네임스페이스를 활용하면 된다.
//해싱할 값이 도메인인 경우
console.log(v5('www.google.com'), v5.DNS);

//해싱할 값이 URL인 경우
console.log(v5('https://www.google.com'), v5.URL);
